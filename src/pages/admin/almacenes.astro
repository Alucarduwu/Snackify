---
import '../../styles/global.css';

const API_ALMACENES = '/api/admin/almacenes';
const API_STOCK = '/api/admin/stock';
const API_PRODUCTOS = '/api/admin/productos';
---

<html lang="es" class="min-h-screen bg-gradient-to-tr from-purple-100 to-blue-100 p-6">
<head>
  <meta charset="UTF-8" />
  <title>Gesti√≥n de Almacenes y Stock - Snackify</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body class="text-gray-900 font-sans">

  <main class="max-w-6xl mx-auto">
    <h1 class="text-5xl font-extrabold text-center text-indigo-700 mb-10 drop-shadow-sm">üì¶ Gesti√≥n de Almacenes & Stock</h1>

    <section class="mb-16">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-3xl font-bold text-indigo-800">üè¨ Almacenes</h2>
        <button id="btnNuevoAlmacen" class="bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-5 py-2 rounded-lg shadow hover:from-indigo-600 hover:to-purple-600 transition">+ Nuevo Almac√©n</button>
      </div>
      <div class="overflow-x-auto rounded-lg shadow-lg bg-white">
        <table class="w-full border-collapse text-sm">
          <thead class="bg-indigo-600 text-white">
            <tr>
              <th class="p-3">Nombre</th>
              <th class="p-3">Direcci√≥n</th>
              <th class="p-3">Tel√©fono</th>
              <th class="p-3">Creado En</th>
              <th class="p-3">Acciones</th>
            </tr>
          </thead>
          <tbody id="tbodyAlmacenes" class="divide-y divide-gray-200 bg-white">
            <tr><td colspan="5" class="p-4 text-center text-gray-500">Cargando...</td></tr>
          </tbody>
        </table>
      </div>
    </section>

    <section>
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-3xl font-bold text-indigo-800">üìä Stock de Productos</h2>
        <button id="btnNuevoStock" class="bg-gradient-to-r from-green-500 to-teal-500 text-white px-5 py-2 rounded-lg shadow hover:from-green-600 hover:to-teal-600 transition">+ Agregar Stock</button>
      </div>
      <div class="overflow-x-auto rounded-lg shadow-lg bg-white">
        <table class="w-full border-collapse text-sm">
          <thead class="bg-green-600 text-white">
            <tr>
              <th class="p-3">Producto</th>
              <th class="p-3">Almac√©n</th>
              <th class="p-3">Cantidad</th>
              <th class="p-3">Fecha Actualizaci√≥n</th>
              <th class="p-3">Acciones</th>
            </tr>
          </thead>
          <tbody id="tbodyStock" class="divide-y divide-gray-200 bg-white">
            <tr><td colspan="5" class="p-4 text-center text-gray-500">Cargando...</td></tr>
          </tbody>
        </table>
      </div>
    </section>

    <section class="mt-12">
      <h2 class="text-3xl font-bold text-indigo-800 mb-4">üìã Productos por Almac√©n</h2>
      <div class="overflow-x-auto rounded-lg shadow-lg bg-white">
        <table class="w-full border-collapse text-sm">
          <thead class="bg-indigo-600 text-white">
            <tr>
              <th class="p-3">Almac√©n</th>
              <th class="p-3">Producto</th>
              <th class="p-3">Cantidad</th>
            </tr>
          </thead>
          <tbody id="tbodyProductosPorAlmacen" class="divide-y divide-gray-200 bg-white">
            <tr><td colspan="3" class="p-4 text-center text-gray-500">Cargando...</td></tr>
          </tbody>
        </table>
      </div>
    </section>
  </main>

  <div id="error" class="text-center text-red-600 mt-6 font-semibold"></div>

  <!-- Modal Almac√©n -->
  <div id="modalAlmacen" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
    <form id="formAlmacen" class="bg-white rounded-lg p-6 max-w-lg w-full space-y-4 shadow-lg">
      <h3 id="titleAlmacen" class="text-xl font-semibold">Nuevo Almac√©n</h3>
      <input type="hidden" name="id" />
      <label class="block">
        <span>Nombre:</span>
        <input type="text" name="nombre" required class="w-full border border-gray-300 rounded px-3 py-2 mt-1" />
      </label>
      <label class="block">
        <span>Direcci√≥n:</span>
        <input type="text" name="direccion" required class="w-full border border-gray-300 rounded px-3 py-2 mt-1" />
      </label>
      <label class="block">
        <span>Tel√©fono:</span>
        <input type="tel" name="telefono" required class="w-full border border-gray-300 rounded px-3 py-2 mt-1" />
      </label>
      <div class="flex justify-end space-x-4 mt-4">
        <button type="button" id="btnCerrarAlmacen" class="px-4 py-2 bg-gray-400 rounded hover:bg-gray-500">Cancelar</button>
        <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">Guardar</button>
      </div>
    </form>
  </div>

  <!-- Modal Stock -->
  <div id="modalStock" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 overflow-auto">
    <form id="formStock" class="bg-white rounded-lg p-6 max-w-lg w-full space-y-4 shadow-lg">
      <h3 id="titleStock" class="text-xl font-semibold mb-4">Agregar Stock</h3>
      <input type="hidden" name="id" />
      <label class="block">
        <span>Producto:</span>
        <select name="producto_id" required class="w-full border border-gray-300 rounded px-3 py-2 mt-1" id="selectProducto">
          <option value="" disabled selected>-- Selecciona un producto --</option>
        </select>
      </label>

      <label class="block">
        <span>Almac√©n:</span>
        <select name="almacen_id" required class="w-full border border-gray-300 rounded px-3 py-2 mt-1" id="selectAlmacen">
          <option value="" disabled selected>-- Selecciona un almac√©n --</option>
        </select>
      </label>

      <label class="block">
        <span>Cantidad:</span>
        <input
          type="number"
          min="0"
          name="cantidad"
          required
          class="w-full border border-gray-300 rounded px-3 py-2 mt-1"
        />
      </label>

      <div class="flex justify-end space-x-4 mt-4">
        <button type="button" id="btnCerrarStock" class="px-4 py-2 bg-gray-400 rounded hover:bg-gray-500">Cancelar</button>
        <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">Guardar</button>
      </div>
    </form>
  </div>

  <script type="module">
  console.log('Script iniciado');

  const API_ALMACENES = '/api/admin/almacenes';
  const API_STOCK = '/api/admin/stock';
  const API_PRODUCTOS = '/api/admin/productos';

  function getToken() {
    const token = localStorage.getItem('token') || '';
    console.log('Token obtenido:', token);
    return token;
  }

  const errorDiv = document.getElementById('error');
  const tbodyAlmacenes = document.getElementById('tbodyAlmacenes');
  const tbodyStock = document.getElementById('tbodyStock');
  const btnNuevoAlmacen = document.getElementById('btnNuevoAlmacen');
  const btnNuevoStock = document.getElementById('btnNuevoStock');

  const modalAlmacen = document.getElementById('modalAlmacen');
  const formAlmacen = document.getElementById('formAlmacen');
  const titleAlmacen = document.getElementById('titleAlmacen');

  const modalStock = document.getElementById('modalStock');
  const formStock = document.getElementById('formStock');
  const titleStock = document.getElementById('titleStock');
  const selectProducto = document.getElementById('selectProducto');
  const selectAlmacen = document.getElementById('selectAlmacen');

  let almacenes = [];
  let productos = [];
  let stocks = [];

  function showError(msg) {
    console.log('Mostrar error:', msg);
    if (!errorDiv) return;
    errorDiv.textContent = msg;
    setTimeout(() => {
      console.log('Limpiando mensaje de error');
      errorDiv.textContent = '';
    }, 5000);
  }

  async function fetchAllData() {
    console.log('fetchAllData iniciado');
    try {
      const token = getToken();
      if (!token) {
        throw new Error('No autorizado, token no encontrado');
      }

      console.log('Solicitando almacenes...');
      const resAlmacenes = await fetch(API_ALMACENES, { headers: { Authorization: 'Bearer ' + token } });
      if (!resAlmacenes.ok) throw new Error('Error cargando almacenes');

      console.log('Solicitando productos...');
      const resProductos = await fetch(API_PRODUCTOS, { headers: { Authorization: 'Bearer ' + token } });
      if (!resProductos.ok) throw new Error('Error cargando productos');

      console.log('Solicitando stock...');
      const resStock = await fetch(API_STOCK, { headers: { Authorization: 'Bearer ' + token } });
      if (!resStock.ok) throw new Error('Error cargando stock');

      almacenes = await resAlmacenes.json();

      const dataProductos = await resProductos.json();
      if (Array.isArray(dataProductos)) {
        productos = dataProductos;
      } else if (dataProductos.productos) {
        productos = dataProductos.productos;
      } else {
        productos = [];
      }

      const dataStocks = await resStock.json();
      if (Array.isArray(dataStocks)) {
        stocks = dataStocks;
      } else if (dataStocks.stocks) {
        stocks = dataStocks.stocks;
      } else {
        stocks = [];
      }

      // *** Mapeo para agregar nombres de producto y almac√©n al stock ***
      stocks = stocks.map(s => {
        const producto = productos.find(p => p.id === s.producto_id);
        const almacen = almacenes.find(a => a.id === s.almacen_id);
        return {
          ...s,
          producto_nombre: producto ? producto.nombre : 'Producto desconocido',
          almacen_nombre: almacen ? almacen.nombre : 'Almac√©n desconocido',
        };
      });

      console.log('Almacenes recibidos:', almacenes);
      console.log('Productos recibidos:', productos);
      console.log('Stock recibido y mapeado:', stocks);

      renderAlmacenes();
      renderProductosSelect();
      renderAlmacenesSelect();
      renderStock();
      renderProductosPorAlmacen();

    } catch (e) {
      console.error('Error en fetchAllData:', e);
      showError(e.message || 'Error desconocido');
    }
  }


  function renderAlmacenes() {
    console.log('Renderizando almacenes...');
    if (!tbodyAlmacenes) return;
    if (almacenes.length === 0) {
      tbodyAlmacenes.innerHTML = `<tr><td colspan="5" class="p-4 text-center text-gray-500">No hay almacenes.</td></tr>`;
      console.log('No hay almacenes para mostrar');
      return;
    }
    tbodyAlmacenes.innerHTML = almacenes.map(a => `
      <tr class="hover:bg-gray-100 even:bg-gray-50">
        <td class="p-3">${a.nombre}</td>
        <td class="p-3">${a.direccion}</td>
        <td class="p-3">${a.telefono}</td>
        <td class="p-3">${new Date(a.creado_en).toLocaleString()}</td>
        <td class="p-3 space-x-2">
          <button class="bg-yellow-400 text-black px-2 py-1 rounded hover:bg-yellow-500" data-id="${a.id}" data-action="edit-almacen">Editar</button>
          <button class="bg-red-600 text-white px-2 py-1 rounded hover:bg-red-700" data-id="${a.id}" data-action="delete-almacen">Eliminar</button>
        </td>
      </tr>
    `).join('');
    console.log('Almacenes renderizados');
  }

 function renderProductosPorAlmacen() {
  console.log('Renderizando productos agrupados por almac√©n con total de stock...');
  const tbody = document.getElementById('tbodyProductosPorAlmacen');
  if (!tbody) return;

  if (almacenes.length === 0 || stocks.length === 0) {
    tbody.innerHTML = `<tr><td colspan="3" class="p-4 text-center text-gray-500">No hay datos para mostrar.</td></tr>`;
    return;
  }

  // Agrupar stocks por almac√©n
  const agrupado = {};
  stocks.forEach(s => {
    if (!agrupado[s.almacen_nombre]) agrupado[s.almacen_nombre] = [];
    agrupado[s.almacen_nombre].push(s);
  });

  // Construir filas agrupadas
  let html = '';
  for (const almacenNombre in agrupado) {
    const productosAlmacen = agrupado[almacenNombre];
    const totalStock = productosAlmacen.reduce((acc, cur) => acc + cur.cantidad, 0);

    // Fila cabecera almac√©n (colspan=3 para toda la tabla)
    html += `
      <tr class="bg-indigo-200 font-bold">
        <td class="p-3" colspan="3">üè¨ ${almacenNombre} ‚Äî Total stock: ${totalStock}</td>
      </tr>
    `;

    // Filas productos
    productosAlmacen.forEach(s => {
      html += `
        <tr class="hover:bg-gray-100 even:bg-gray-50">
          <td class="p-3"></td>
          <td class="p-3">${s.producto_nombre}</td>
          <td class="p-3">${s.cantidad}</td>
        </tr>
      `;
    });
  }

  tbody.innerHTML = html;
  console.log('Productos por almac√©n agrupados y totales renderizados');
}


  function renderProductosSelect() {
    console.log('Renderizando select productos...');
    if (!selectProducto) return;
    selectProducto.innerHTML = `<option value="" disabled selected>-- Selecciona un producto --</option>` +
      productos.map(p => `<option value="${p.id}">${p.nombre}</option>`).join('');
    console.log('Select productos renderizado');
  }

  function renderAlmacenesSelect() {
    console.log('Renderizando select almacenes...');
    if (!selectAlmacen) return;
    selectAlmacen.innerHTML = `<option value="" disabled selected>-- Selecciona un almac√©n --</option>` +
      almacenes.map(a => `<option value="${a.id}">${a.nombre}</option>`).join('');
    console.log('Select almacenes renderizado');
  }

  function renderStock() {
    console.log('Renderizando stock...');
    if (!tbodyStock) return;
    if (stocks.length === 0) {
      tbodyStock.innerHTML = `<tr><td colspan="5" class="p-4 text-center text-gray-500">No hay stock registrado.</td></tr>`;
      console.log('No hay stock para mostrar');
      return;
    }
    tbodyStock.innerHTML = stocks.map(s => `
      <tr class="hover:bg-gray-100 even:bg-gray-50">
        <td class="p-3">${s.producto_nombre}</td>
        <td class="p-3">${s.almacen_nombre}</td>
        <td class="p-3">${s.cantidad}</td>
        <td class="p-3">${new Date(s.fecha_actualizacion).toLocaleString()}</td>
        <td class="p-3 space-x-2">
          <button class="bg-yellow-400 text-black px-2 py-1 rounded hover:bg-yellow-500" data-id="${s.id}" data-action="edit-stock">Editar</button>
          <button class="bg-red-600 text-white px-2 py-1 rounded hover:bg-red-700" data-id="${s.id}" data-action="delete-stock">Eliminar</button>
        </td>
      </tr>
    `).join('');
    console.log('Stock renderizado');
  }

  function openModalAlmacen(almacen) {
    console.log('Abriendo modal almac√©n', almacen);
    modalAlmacen.classList.remove('hidden');
    if (almacen) {
      titleAlmacen.textContent = 'Editar Almac√©n';
      formAlmacen.elements.namedItem('id').value = almacen.id.toString();
      formAlmacen.elements.namedItem('nombre').value = almacen.nombre;
      formAlmacen.elements.namedItem('direccion').value = almacen.direccion;
      formAlmacen.elements.namedItem('telefono').value = almacen.telefono;
    } else {
      titleAlmacen.textContent = 'Nuevo Almac√©n';
      formAlmacen.reset();
      formAlmacen.elements.namedItem('id').value = '';
    }
  }

  function openModalStock(stock) {
    console.log('Abriendo modal stock', stock);
    modalStock.classList.remove('hidden');
    if (stock) {
      titleStock.textContent = 'Editar Stock';
      formStock.elements.namedItem('id').value = stock.id.toString();
      formStock.elements.namedItem('producto_id').value = stock.producto_id.toString();
      formStock.elements.namedItem('almacen_id').value = stock.almacen_id.toString();
      formStock.elements.namedItem('cantidad').value = stock.cantidad.toString();
    } else {
      titleStock.textContent = 'Agregar Stock';
      formStock.reset();
      formStock.elements.namedItem('id').value = '';
    }
  }

  function closeModalAlmacen() {
    console.log('Cerrando modal almac√©n');
    modalAlmacen.classList.add('hidden');
  }

  function closeModalStock() {
    console.log('Cerrando modal stock');
    modalStock.classList.add('hidden');
  }

  async function saveAlmacen(data) {
    try {
      const token = getToken();
      if (!token) throw new Error('No autorizado');

      const id = data.id;
      const url = id ? `${API_ALMACENES}/${id}` : API_ALMACENES;
      const method = id ? 'PUT' : 'POST';

      const res = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify(data)
      });
      if (!res.ok) throw new Error('Error guardando almac√©n');

      await fetchAllData();
      closeModalAlmacen();
    } catch (e) {
      console.error('Error en saveAlmacen:', e);
      showError(e.message || 'Error desconocido al guardar almac√©n');
    }
  }

  async function saveStock(data) {
    try {
      const token = getToken();
      if (!token) throw new Error('No autorizado');

      const id = data.id;
      const url = id ? `${API_STOCK}/${id}` : API_STOCK;
      const method = id ? 'PUT' : 'POST';

      const res = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify(data)
      });
      if (!res.ok) throw new Error('Error guardando stock');

      await fetchAllData();
      closeModalStock();
    } catch (e) {
      console.error('Error en saveStock:', e);
      showError(e.message || 'Error desconocido al guardar stock');
    }
  }

  async function deleteAlmacen(id) {
    if (!confirm('¬øSeguro que quieres eliminar este almac√©n? Esta acci√≥n es irreversible.')) return;
    try {
      const token = getToken();
      if (!token) throw new Error('No autorizado');

      const res = await fetch(`${API_ALMACENES}/${id}`, {
        method: 'DELETE',
        headers: { Authorization: 'Bearer ' + token }
      });
      if (!res.ok) throw new Error('Error eliminando almac√©n');

      await fetchAllData();
    } catch (e) {
      console.error('Error en deleteAlmacen:', e);
      showError(e.message || 'Error desconocido al eliminar almac√©n');
    }
  }

  async function deleteStock(id) {
    if (!confirm('¬øSeguro que quieres eliminar este stock? Esta acci√≥n es irreversible.')) return;
    try {
      const token = getToken();
      if (!token) throw new Error('No autorizado');

      const res = await fetch(`${API_STOCK}/${id}`, {
        method: 'DELETE',
        headers: { Authorization: 'Bearer ' + token }
      });
      if (!res.ok) throw new Error('Error eliminando stock');

      await fetchAllData();
    } catch (e) {
      console.error('Error en deleteStock:', e);
      showError(e.message || 'Error desconocido al eliminar stock');
    }
  }

  // Eventos globales para botones dentro de tablas
  document.body.addEventListener('click', e => {
    const target = e.target;
    if (!(target instanceof HTMLElement)) return;

    // Editar almac√©n
    if (target.dataset.action === 'edit-almacen') {
      const id = target.dataset.id;
      const almacen = almacenes.find(a => a.id.toString() === id);
      openModalAlmacen(almacen);
    }
    // Eliminar almac√©n
    else if (target.dataset.action === 'delete-almacen') {
      const id = target.dataset.id;
      deleteAlmacen(id);
    }
    // Editar stock
    else if (target.dataset.action === 'edit-stock') {
      const id = target.dataset.id;
      const stock = stocks.find(s => s.id.toString() === id);
      openModalStock(stock);
    }
    // Eliminar stock
    else if (target.dataset.action === 'delete-stock') {
      const id = target.dataset.id;
      deleteStock(id);
    }
  });

  btnNuevoAlmacen.addEventListener('click', () => openModalAlmacen(null));
  btnNuevoStock.addEventListener('click', () => openModalStock(null));

  document.getElementById('btnCerrarAlmacen').addEventListener('click', closeModalAlmacen);
  document.getElementById('btnCerrarStock').addEventListener('click', closeModalStock);

  formAlmacen.addEventListener('submit', e => {
    e.preventDefault();
    const formData = new FormData(formAlmacen);
    const data = {
      id: formData.get('id'),
      nombre: formData.get('nombre'),
      direccion: formData.get('direccion'),
      telefono: formData.get('telefono')
    };
    saveAlmacen(data);
  });

  formStock.addEventListener('submit', e => {
    e.preventDefault();
    const formData = new FormData(formStock);
    const data = {
      id: formData.get('id'),
      producto_id: parseInt(formData.get('producto_id')),
      almacen_id: parseInt(formData.get('almacen_id')),
      cantidad: parseInt(formData.get('cantidad'))
    };
    saveStock(data);
  });

  // Al iniciar p√°gina cargamos datos
  fetchAllData();

  </script>

</body>
</html>
