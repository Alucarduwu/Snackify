---
import userData from '../utils/userData';
import type { User } from '../utils/userData';
import UserOption from './UserOption.astro';

interface Props {
  user?: User;
}
const { user = userData } = Astro.props;
---

<section class="w-full h-full my-[10px] flex flex-col lg:flex-row items-center justify-around">
  <div class="flex flex-col w-[90%] sm:w-[35%] bg-black/30 backdrop-blur-2xl p-3 rounded-4xl justify-center">
    <div class="relative flex flex-col items-center">
      <div class="relative sm:w-[200px] sm:h-[200px] w-[100px] h-[100px]">
        <img
          id="profileImg"
          src={user.perfil || 'Img\User\LICHT.webp'}
          alt="Perfil"
          class="rounded-full w-full h-full object-cover"
        />
        <input
          type="file"
          id="fileInput"
          accept="image/*"
          class="absolute bottom-2 right-2 w-8 h-8 bg-white rounded-full opacity-80 cursor-pointer"
          title="Cambiar imagen"
        />
      </div>
      <form id="editForm" class="w-full mt-4 flex flex-col gap-2 text-white">
        <input
          name="username"
          placeholder="Nombre de usuario"
          class="p-2 rounded bg-white/10 border border-white/40 text-white"
          required
        />
        <input
          name="email"
          type="email"
          placeholder="Correo"
          class="p-2 rounded bg-white/10 border border-white/40 text-white"
          required
        />
        <input
          name="password"
          type="password"
          placeholder="Nueva contraseña (opcional)"
          class="p-2 rounded bg-white/10 border border-white/40 text-white"
        />
        <input
          name="confirmPassword"
          type="password"
          placeholder="Confirmar contraseña"
          class="p-2 rounded bg-white/10 border border-white/40 text-white"
        />
        <button
          type="submit"
          class="p-2 bg-amber-400 text-black font-semibold rounded hover:bg-amber-300 transition"
        >
          Guardar cambios
        </button>
        <p id="message" class="text-center mt-2 text-sm"></p>
      </form>
    </div>
  </div>

  <div
    class="flex flex-col w-[95%] bg-black/40 backdrop-blur-2xl p-4 items-center justify-center gap-4 rounded-2xl sm:w-[60%] text-white"
  >
    <h3 class="text-4xl font-semibold mb-4">Opciones de cuenta</h3>
    <UserOption user={user} title="Opciones del usuario" />
  </div>
</section>

<script type="module">
  document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('token');
    if (!token) return;

    const form = document.getElementById('editForm');
    const message = document.getElementById('message');
    const fileInput = document.getElementById('fileInput');
    const img = document.getElementById('profileImg');

    if (!form || !message || !fileInput || !img) return;

    // Cargar datos del usuario
    try {
      const res = await fetch('/api/me', {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error('No autorizado');
      const { user } = await res.json();

      form.username.value = user.username || '';
      form.email.value = user.email || '';
      img.src = user.perfil || '\Img\User\LICHT.webp';
    } catch (err) {
      message.textContent = '❌ Error al cargar datos';
      message.style.color = 'salmon';
      return;
    }

    // Submit formulario para actualizar datos
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const username = form.username.value.trim();
      const email = form.email.value.trim();
      const password = form.password.value.trim();
      const confirmPassword = form.confirmPassword.value.trim();
      const perfil = img.src;

      if (password && password !== confirmPassword) {
        message.textContent = '❌ Las contraseñas no coinciden';
        message.style.color = 'salmon';
        return;
      }

      const body = { username, email, perfil };
      if (password.length > 0) body.password = password;

      try {
        const res = await fetch('/api/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(body),
        });

        const data = await res.json();
        if (res.ok) {
          message.textContent = '✅ ' + (data.message || 'Actualizado correctamente');
          message.style.color = 'lightgreen';
          form.password.value = '';
          form.confirmPassword.value = '';
        } else {
          message.textContent = '❌ ' + (data.error || 'Error desconocido');
          message.style.color = 'salmon';
        }
      } catch {
        message.textContent = '❌ Error en la conexión';
        message.style.color = 'salmon';
      }
    });

    // Preview imagen antes de subir (solo client-side)
    fileInput.addEventListener('change', () => {
      const file = fileInput.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = () => {
        img.src = reader.result;
      };
      reader.readAsDataURL(file);
    });
  });
</script>
